{"version":3,"sources":["../src/echarts_map_ctrl.js"],"names":["PanelCtrl","_","echarts","EchartsMapCtrl","$scope","$injector","panelDefaults","EchartsOption","IS_MAP","map","sensors","fakeData","USE_URL","USE_FAKE_DATA","url","request","updateInterval","maps","defaultsDeep","panel","events","on","onInitEditMode","bind","render","updateData","that","xmlhttp","data","eval","addSensor","onDataReceived","window","XMLHttpRequest","ActiveXObject","onreadystatuschange","readyStatue","status","JSON","parse","responseText","open","send","$timeout","IS_DATA_CHANGED","oddSensors","slice","length","forEach","newData","i","push","branchName","values","alias","location","coord","oddData","addEditorTab","System","import","getPanelPath","grafanaBootData","settings","panels","pluginId","baseUrl","scope","elem","attrs","ctrl","$panelContainer","find","option","Timer","currentLoc","echartsData","myChart","init","importMap","setTimeout","resize","setTimer","clearTimeout","setOption","geo","regions","name","selected","sensor","$panelCard","cardInner","el","value","unit","innerHTML","clear","renderingCompleted","templateUrl"],"mappings":"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","file":"echarts_map_ctrl.js","sourcesContent":["import { PanelCtrl } from 'app/plugins/sdk'; // eslint-disable-line\r\nimport _ from 'lodash';\r\nimport echarts from './libs/echarts.min'; // eslint-disable-line\r\nimport './libs/dark'; // eslint-disable-line\r\nimport './css/style.css!'; // eslint-disable-line\r\nimport './libs/bmap.js'; // eslint-disable-line\r\nimport './libs/getBmap.js'; // eslint-disable-line\r\nexport class EchartsMapCtrl extends PanelCtrl { // eslint-disable-line\r\n  constructor($scope, $injector) {\r\n    super($scope, $injector);\r\n\r\n    const panelDefaults = {\r\n      EchartsOption: 'option = {}',\r\n      IS_MAP: false,\r\n      map: '',\r\n      sensors: [],\r\n      fakeData: `[{\r\n        branchName: '北京',\r\n        status: '1', // 0 1 2 =>绿 橙 红\r\n        values: [{\r\n          name: '数量',\r\n          value: '100',\r\n          unit: '台',\r\n        }],\r\n        alias: '北京',\r\n        location: '北京',\r\n        coord: [116, 40]\r\n      }]`,\r\n      USE_URL: false,\r\n      USE_FAKE_DATA: false,\r\n      url: '',\r\n      request: '',\r\n      updateInterval: 10000,\r\n    };\r\n\r\n    this.maps = ['世界', '中国', '北京'];\r\n\r\n    _.defaultsDeep(this.panel, panelDefaults);\r\n\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    this.events.on('panel-initialized', this.render.bind(this));\r\n\r\n    this.updateData();\r\n  }\r\n\r\n  // post请求\r\n  updateData() {\r\n    const that = this;\r\n    let xmlhttp;\r\n\r\n    if (that.panel.USE_FAKE_DATA) {\r\n      that.data = eval(that.panel.fakeData);\r\n      that.addSensor();\r\n      that.onDataReceived();\r\n    } else {\r\n      if (window.XMLHttpRequest) {\r\n        xmlhttp = new XMLHttpRequest();\r\n      } else {\r\n        xmlhttp = new ActiveXObject('Microsoft.XMLHTTP'); // eslint-disable-line\r\n      }\r\n\r\n      xmlhttp.onreadystatuschange = () => {\r\n        if (xmlhttp.readyStatue === 4 && xmlhttp.status === 200) {\r\n          that.data = JSON.parse(xmlhttp.responseText);\r\n          that.addSensor();\r\n          that.onDataReceived();\r\n        }\r\n      };\r\n\r\n      if (!that.panel.USE_FAKE_DATA && that.panel.url && that.panel.request) {\r\n        xmlhttp.open('POST', that.panel.url, true);\r\n        xmlhttp.send(that.panel.request);\r\n      }\r\n    }\r\n\r\n    that.$timeout(() => { that.updateData(); }, that.panel.updateInterval);\r\n  }\r\n\r\n  onDataReceived() {\r\n    this.IS_DATA_CHANGED = true;\r\n    this.render();\r\n    this.IS_DATA_CHANGED = false;\r\n  }\r\n\r\n  addSensor() {\r\n    if (!this.data) return;\r\n\r\n    const oddSensors = this.panel.sensors.slice(); // 保存原数据\r\n    this.panel.sensors.length = 0; // 清空现有数据\r\n\r\n    // 添加新数据，对比原数据，以保留坐标信息\r\n    this.data.forEach((newData, i) => {\r\n      this.panel.sensors.push({\r\n        branchName: newData.branchName,\r\n        status: newData.status,\r\n        values: newData.values,\r\n        alias: newData.branchName,\r\n        location: '北京',\r\n        coord: [116, 40],\r\n      });\r\n\r\n      oddSensors.forEach((oddData) => {\r\n        if (newData.branchName === oddData.branchName) {\r\n          this.panel.sensors[i].alias = oddData.alias;\r\n          this.panel.sensors[i].location = oddData.location;\r\n          this.panel.sensors[i].coord = oddData.coord;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  // deleteSensor(index) {\r\n  //   this.panel.sensors.splice(index, 1);\r\n  // }\r\n\r\n  onInitEditMode() {\r\n    this.addEditorTab('标记点', 'public/plugins/dxc-echarts-map-panel/partials/editor_mark.html', 2);\r\n    this.addEditorTab('Echarts配置', 'public/plugins/dxc-echarts-map-panel/partials/editor_option.html', 3);\r\n  }\r\n\r\n  importMap() {\r\n    if (!this.panel.IS_MAP) return;\r\n    switch (this.panel.map) {\r\n      case '世界':\r\n        System.import(`${this.getPanelPath()}libs/world.js`); // eslint-disable-line\r\n        break;\r\n      case '中国':\r\n        System.import(`${this.getPanelPath()}libs/china.js`); // eslint-disable-line\r\n        break;\r\n      case '北京':\r\n        System.import(`${this.getPanelPath()}libs/beijing.js`); // eslint-disable-line\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  getPanelPath() {\r\n    // the system loader preprends publib to the url, add a .. to go back one level\r\n    return `../${grafanaBootData.settings.panels[this.pluginId].baseUrl}/`; // eslint-disable-line\r\n  }\r\n\r\n  link(scope, elem, attrs, ctrl) {\r\n    const $panelContainer = elem.find('.echarts_map_container')[0];\r\n    let option = {}; // eslint-disable-line\r\n    let Timer;\r\n    let currentLoc = 0;\r\n    let echartsData = []; // eslint-disable-line\r\n\r\n    ctrl.IS_DATA_CHANGED = true;\r\n\r\n    const myChart = echarts.init($panelContainer, 'dark');\r\n\r\n    ctrl.importMap();\r\n\r\n    // bad hank\r\n    setTimeout(() => {\r\n      myChart.resize();\r\n    }, 1000);\r\n\r\n    // 轮播计时器\r\n    function setTimer() {\r\n      clearTimeout(Timer);\r\n\r\n      if (ctrl.panel.sensors.length > 0) {\r\n        myChart.setOption({\r\n          geo: {\r\n            regions: [{\r\n              name: ctrl.panel.sensors[currentLoc].location,\r\n              selected: true,\r\n            }],\r\n          },\r\n        });\r\n\r\n        ctrl.sensor = ctrl.panel.sensors[currentLoc];\r\n\r\n        const $panelCard = elem.find('.map_card_container')[0];\r\n        if ($panelCard && ctrl.sensor.values && ctrl.sensor.values.length) {\r\n          let cardInner = '';\r\n          ctrl.sensor.values.forEach((el) => {\r\n            cardInner += `<div class=\"info\">\r\n              <span class=\"text\">${el.name}</span>\r\n              <span class=\"value\">${el.value}</span>\r\n              <span class=\"text\">${el.unit}</span>\r\n            </div>`;\r\n          });\r\n\r\n          $panelCard.innerHTML = `<div class = \"card\">\r\n            <div class=\"title\">\r\n              <i class=\"icon\" style=\"background:${['#3aae32', '#fe8f02', '#c23531'][ctrl.sensor.status % 3]};\"></i>\r\n              ${ctrl.sensor.alias}\r\n            </div>\r\n            ${cardInner}\r\n          </div>`;\r\n        }\r\n\r\n        currentLoc = (currentLoc + 1) % ctrl.panel.sensors.length;\r\n\r\n        Timer = setTimeout(setTimer, 3600);\r\n      }\r\n    }\r\n\r\n    function render() {\r\n      if (!myChart) {\r\n        return;\r\n      }\r\n\r\n      if (ctrl.IS_DATA_CHANGED) {\r\n        myChart.clear();\r\n        echartsData = ctrl.panel.sensors;\r\n      }\r\n\r\n      eval(ctrl.panel.EchartsOption);\r\n      myChart.setOption(option);\r\n\r\n      myChart.resize();\r\n\r\n      setTimer();\r\n    }\r\n\r\n    this.events.on('render', () => {\r\n      render();\r\n      ctrl.renderingCompleted();\r\n    });\r\n  }\r\n}\r\n\r\nEchartsMapCtrl.templateUrl = 'module.html';\r\n"]}