{"version":3,"sources":["../src/echarts_map_ctrl.js"],"names":["PanelCtrl","_","echarts","EchartsMapCtrl","$scope","$injector","panelDefaults","EchartsOption","valueMaps","sensors","url","updateInterval","defaults","panel","events","on","onInitEditMode","bind","render","updateClock","that","xmlhttp","window","XMLHttpRequest","ActiveXObject","onreadystatechange","readyState","status","JSON","parse","responseText","success","data","addSensor","open","send","$timeout","oddSensors","slice","length","i","push","branchName","values","alias","location","coord","j","dataChanged","IS_DATA_CHANGED","addEditorTab","scope","elem","attrs","ctrl","$panelContainer","find","option","Timer","currentLoc","colorArr","echartsData","height","row","isString","parseInt","replace","title","style","width","document","body","clientWidth","span","myChart","init","resize","clear","eval","setOption","setTimer","clearTimeout","geo","regions","name","selected","sensor","$panelCard","innerHTML","value","unit","setTimeout","renderingCompleted","templateUrl"],"mappings":"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","file":"echarts_map_ctrl.js","sourcesContent":["import { PanelCtrl } from 'app/plugins/sdk';\r\nimport _ from 'lodash';\r\nimport echarts from './libs/echarts';\r\nimport './libs/dark';\r\nimport './libs/china';\r\nimport './libs/beijing';\r\nimport './libs/邹城';\r\nimport './style.css!';\r\nexport class EchartsMapCtrl extends PanelCtrl {\r\n\r\n    constructor($scope, $injector) {\r\n        super($scope, $injector);\r\n\r\n        const panelDefaults = {\r\n            EchartsOption: 'option = {}',\r\n            valueMaps: [],\r\n            sensors: [],\r\n            url: '',\r\n            updateInterval: 10000\r\n        };\r\n\r\n        _.defaults(this.panel, panelDefaults);\r\n        _.defaults(this.panel.EchartsOption, panelDefaults.EchartsOption);\r\n\r\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n        this.events.on('panel-initialized', this.render.bind(this));\r\n\r\n        this.updateClock();\r\n    }\r\n\r\n    //post请求\r\n    updateClock() {\r\n        let that = this, xmlhttp;\r\n\r\n        if (window.XMLHttpRequest) {\r\n            xmlhttp = new XMLHttpRequest();\r\n        } else {\r\n            xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n        }\r\n\r\n        xmlhttp.onreadystatechange = function () {\r\n            if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\r\n                if (!JSON.parse(xmlhttp.responseText).success) return;\r\n                that.data = JSON.parse(xmlhttp.responseText).data;\r\n                that.addSensor();\r\n            }\r\n        }\r\n\r\n        if (that.panel.url) {\r\n            xmlhttp.open(\"POST\", that.panel.url, true);\r\n            xmlhttp.send(\"input=grafana\");\r\n        }\r\n\r\n        this.$timeout(() => { this.updateClock(); }, that.panel.updateInterval);\r\n    }\r\n\r\n    addSensor() {\r\n        let oddSensors = this.panel.sensors.slice(); // 保存原数据\r\n        this.panel.sensors.length = 0; // 清空现有数据\r\n\r\n        // 添加新数据，对比原数据，以保留坐标信息\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.panel.sensors.push({ branchName: this.data[i].branchName, status: this.data[i].status, values: this.data[i].values, alias: this.data[i].branchName, location: '北京', coord: [116, 40] });\r\n\r\n            for (let j = 0; j < oddSensors.length; j++) {\r\n                if (this.data[i].branchName == oddSensors[j].branchName) {\r\n                    this.panel.sensors[i].alias = oddSensors[j].alias;\r\n                    this.panel.sensors[i].location = oddSensors[j].location;\r\n                    this.panel.sensors[i].coord = oddSensors[j].coord;\r\n                }\r\n            }\r\n        }\r\n        this.dataChanged();\r\n    }\r\n\r\n    dataChanged() {\r\n        this.IS_DATA_CHANGED = true;\r\n        this.render();\r\n        this.IS_DATA_CHANGED = false;\r\n    }\r\n\r\n    // deleteSensor(index) {\r\n    //     this.panel.sensors.splice(index, 1);\r\n    // }\r\n\r\n    onInitEditMode() {\r\n        this.addEditorTab('Data', 'public/plugins/grafana-echarts-map-panel/editor_mark.html', 2);\r\n        this.addEditorTab('Echarts options', 'public/plugins/grafana-echarts-map-panel/editor_option.html', 3);\r\n    }\r\n\r\n    link(scope, elem, attrs, ctrl) {\r\n        const $panelContainer = elem.find('.echarts_container')[0];\r\n        let option = {},\r\n            Timer,\r\n            currentLoc = 0,\r\n            colorArr = ['#3aae32', '#fe8f02', '#c23531'],\r\n            echartsData = [];\r\n\r\n        ctrl.IS_DATA_CHANGED = true;\r\n\r\n        //init height\r\n        let height = ctrl.height || panel.height || ctrl.row.height;\r\n        if (_.isString(height)) {\r\n            height = parseInt(height.replace('px', ''), 10);\r\n        }\r\n\t    height -= 5;\r\n\t    height -= ctrl.panel.title ? 24 : 9;\r\n        $panelContainer.style.height = height + 'px';\r\n\r\n        //init width\r\n        let width = document.body.clientWidth;\r\n        width = (width - 5.6 * 2) * ctrl.panel.span / 12 - 5.6 * 2 - 1 * 2 - 10 * 2;\r\n        $panelContainer.style.width = width + 'px';\r\n\r\n        //init echarts\r\n        let myChart = echarts.init($panelContainer, 'dark');\r\n\r\n        function render() {\r\n            if (!myChart) {\r\n                return;\r\n            }\r\n            myChart.resize();\r\n\r\n            if (ctrl.IS_DATA_CHANGED) {\r\n                myChart.clear();\r\n                echartsData = ctrl.panel.sensors;\r\n            }\r\n\r\n            eval(ctrl.panel.EchartsOption);\r\n            myChart.setOption(option);\r\n\r\n            setTimer();\r\n        }\r\n\r\n        //轮播计时器\r\n        function setTimer() {\r\n            clearTimeout(Timer);\r\n\r\n            if (ctrl.panel.sensors.length > 0) {\r\n                myChart.setOption({\r\n                    geo:{\r\n                        regions: [{\r\n                            name: ctrl.panel.sensors[currentLoc].location,\r\n                            selected: true\r\n                        }]\r\n                    }\r\n                });\r\n\r\n                ctrl.sensor = ctrl.panel.sensors[currentLoc];\r\n\r\n                let $panelCard = elem.find('.echarts_card')[0];\r\n                if ($panelCard) {\r\n                    $panelCard.innerHTML = '<div class=\"title\"><i class=\"icon\" style=\"background:' + colorArr[ctrl.sensor.status % 3] + ';\"></i>' + ctrl.sensor.alias + '</div>';\r\n\r\n                    for (let j = 0; j < ctrl.sensor.values.length; j++) {\r\n                        $panelCard.innerHTML += '<div class=\"info\">' + ' <span class=\"text\">' + ctrl.sensor.values[j].name + '</span>' + ' <span class=\"value\">' + ctrl.sensor.values[j].value + '</span>' + ' <span class=\"text\">' + ctrl.sensor.values[j].unit + '</span>' + '</div>';\r\n                    }\r\n                }\r\n\r\n                currentLoc = (currentLoc + 1) % ctrl.panel.sensors.length;\r\n\r\n                Timer = setTimeout(setTimer, 3600);\r\n            }\r\n        }\r\n\r\n        this.events.on('render', function () {\r\n            render();\r\n            ctrl.renderingCompleted();\r\n        });\r\n    }\r\n}\r\n\r\nEchartsMapCtrl.templateUrl = 'module.html';\r\n"]}