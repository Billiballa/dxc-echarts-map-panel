{"version":3,"sources":["../src/echarts_map_ctrl.js"],"names":["PanelCtrl","_","echarts","EchartsMapCtrl","$scope","$injector","panelDefaults","EchartsOption","IS_MAP","map","sensors","fakeData","USE_URL","url","request","updateInterval","maps","defaultsDeep","panel","events","on","onInitEditMode","bind","render","updateData","that","xmlhttp","window","XMLHttpRequest","ActiveXObject","onreadystatuschange","readyStatue","status","data","JSON","parse","responseText","onDataReceived","open","send","$timeout","USE_FAKE_DATA","eval","addSensor","IS_DATA_CHANGED","oddSensors","slice","length","i","push","branchName","values","alias","location","coord","j","addEditorTab","System","import","getPanelPath","grafanaBootData","settings","panels","pluginId","baseUrl","scope","elem","attrs","ctrl","$panelContainer","find","option","Timer","cardInner","currentLoc","colorArr","echartsData","setHeight","height","row","isString","parseInt","replace","style","myChart","init","importMap","setTimeout","resize","callInterval","timeout","result","func","callBack","interval","context","args","arguments","clearInterval","setInterval","apply","clear","setOption","setTimer","clearTimeout","geo","regions","name","selected","sensor","$panelCard","value","unit","innerHTML","renderingCompleted","templateUrl"],"mappings":"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","file":"echarts_map_ctrl.js","sourcesContent":["import { PanelCtrl } from 'app/plugins/sdk';\r\nimport _ from 'lodash';\r\nimport echarts from './libs/echarts.min';\r\nimport './libs/dark';\r\nimport './style.css!';\r\nimport './libs/bmap.js';\r\nimport './libs/getBmap.js';\r\nexport class EchartsMapCtrl extends PanelCtrl {\r\n\r\n    constructor($scope, $injector) {\r\n        super($scope, $injector);\r\n\r\n        const panelDefaults = {\r\n            EchartsOption: 'option = {}',\r\n            IS_MAP: false,\r\n            map: '',\r\n            sensors: [],\r\n            fakeData: '',\r\n            USE_URL: false,\r\n            url: '',\r\n            request: '',\r\n            updateInterval: 10000\r\n        };\r\n\r\n        this.maps = ['世界', '中国', '北京'];\r\n\r\n        _.defaultsDeep(this.panel, panelDefaults);\r\n\r\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n        this.events.on('panel-initialized', this.render.bind(this));\r\n\r\n        this.updateData();\r\n    }\r\n\r\n    //post请求\r\n    updateData() {\r\n        let that = this, xmlhttp;\r\n\r\n        if (window.XMLHttpRequest) {\r\n            xmlhttp = new XMLHttpRequest();\r\n        } else {\r\n            xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n        }\r\n\r\n        xmlhttp.onreadystatuschange = function () {\r\n            if (xmlhttp.readyStatue == 4 && xmlhttp.status == 200) {\r\n                that.data = JSON.parse(xmlhttp.responseText);\r\n                that.onDataReceived();\r\n            }\r\n        };\r\n\r\n        if (that.panel.USE_URL && that.panel.url && that.panel.request) {\r\n            xmlhttp.open(\"POST\", that.panel.url, true);\r\n            xmlhttp.send(that.panel.request);\r\n        }\r\n\r\n        this.$timeout(() => { this.updateData(); }, that.panel.updateInterval);\r\n    }\r\n\r\n    onDataReceived() {\r\n        if (this.panel.USE_FAKE_DATA && this.panel.fakeData) {\r\n            this.data = eval(this.panel.fakeData); // jshint ignore:line\r\n        }\r\n        \r\n        this.addSensor();\r\n\r\n        this.IS_DATA_CHANGED = true;\r\n        this.render();\r\n        this.IS_DATA_CHANGED = false;\r\n    }\r\n\r\n    addSensor() {\r\n        let oddSensors = this.panel.sensors.slice(); // 保存原数据\r\n        this.panel.sensors.length = 0; // 清空现有数据\r\n\r\n        // 添加新数据，对比原数据，以保留坐标信息\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.panel.sensors.push({ branchName: this.data[i].branchName, status: this.data[i].status, values: this.data[i].values, alias: this.data[i].branchName, location: '北京', coord: [116, 40] });\r\n\r\n            for (let j = 0; j < oddSensors.length; j++) {\r\n                if (this.data[i].branchName == oddSensors[j].branchName) {\r\n                    this.panel.sensors[i].alias = oddSensors[j].alias;\r\n                    this.panel.sensors[i].location = oddSensors[j].location;\r\n                    this.panel.sensors[i].coord = oddSensors[j].coord;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // deleteSensor(index) {\r\n    //     this.panel.sensors.splice(index, 1);\r\n    // }\r\n\r\n    onInitEditMode() {\r\n        this.addEditorTab('数据', 'public/plugins/dxc-echarts-map-panel/editor_mark.html', 2);\r\n        this.addEditorTab('Echarts配置', 'public/plugins/dxc-echarts-map-panel/editor_option.html', 3);\r\n    }\r\n\r\n    importMap() {\r\n        if (!this.panel.IS_MAP) return;\r\n        switch (this.panel.map) {\r\n            case '世界':\r\n                System.import(this.getPanelPath() + 'libs/world.js');\r\n                break;\r\n            case '中国':\r\n                System.import(this.getPanelPath() + 'libs/china.js');\r\n                break;\r\n            case '北京':\r\n                System.import(this.getPanelPath() + 'libs/beijing.js');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getPanelPath() {\r\n        // the system loader preprends publib to the url, add a .. to go back one level\r\n        return '../' + grafanaBootData.settings.panels[this.pluginId].baseUrl + '/';\r\n    }\r\n\r\n    link(scope, elem, attrs, ctrl) {\r\n        const $panelContainer = elem.find('.echarts_map_container')[0];\r\n        let option = {},\r\n            Timer,\r\n            cardInner = '',\r\n            currentLoc = 0,\r\n            colorArr = ['#3aae32', '#fe8f02', '#c23531'],\r\n            echartsData = [];\r\n\r\n        ctrl.IS_DATA_CHANGED = true;\r\n\r\n        function setHeight() {\r\n            let height = ctrl.height || panel.height || ctrl.row.height;\r\n            if (_.isString(height)) {\r\n                height = parseInt(height.replace('px', ''), 10);\r\n            }\r\n            // height -= 7;\r\n            // height -= ctrl.panel.title ? 25 : 9;\r\n            $panelContainer.style.height = height + 'px';\r\n        }\r\n\r\n        // function setWidth() {\r\n        //     let width = document.body.clientWidth;\r\n        //     width = (width - 5.6 * 2) * ctrl.panel.span / 12 - 5.6 * 2 - 1 * 2 - 10 * 2;\r\n        //     $panelContainer.style.width = width + 'px';\r\n        // }\r\n\r\n        setHeight();\r\n        // setWidth();\r\n\r\n        let myChart = echarts.init($panelContainer, 'dark');\r\n\r\n        ctrl.importMap();\r\n\r\n        // bad hank\r\n        setTimeout(function () {\r\n            myChart.resize();\r\n        }, 1000);\r\n\r\n        // 防止重复触发事件\r\n        var callInterval = function callInterval() {\r\n            var timeout, result;\r\n\r\n            function func(callBack, interval) {\r\n                var context = this; // jshint ignore:line\r\n                var args = arguments;\r\n\r\n                if (timeout) clearInterval(timeout);\r\n\r\n                timeout = setInterval(function () {\r\n                    result = callBack.apply(context, args);\r\n                }, interval);\r\n\r\n                return result;\r\n            }\r\n\r\n            return func;\r\n        }();\r\n\r\n        function render() {\r\n            if (!myChart) {\r\n                return;\r\n            }\r\n\r\n            setHeight();\r\n            myChart.resize();\r\n\r\n            if (ctrl.IS_DATA_CHANGED) {\r\n                myChart.clear();\r\n                echartsData = ctrl.panel.sensors;\r\n            }\r\n\r\n            eval(ctrl.panel.EchartsOption); // jshint ignore:line\r\n            myChart.setOption(option);\r\n\r\n            setTimer();\r\n        }\r\n\r\n        //轮播计时器\r\n        function setTimer() {\r\n            clearTimeout(Timer);\r\n\r\n            if (ctrl.panel.sensors.length > 0) {\r\n                myChart.setOption({\r\n                    geo: {\r\n                        regions: [{\r\n                            name: ctrl.panel.sensors[currentLoc].location,\r\n                            selected: true\r\n                        }]\r\n                    }\r\n                });\r\n\r\n                ctrl.sensor = ctrl.panel.sensors[currentLoc];\r\n\r\n                let $panelCard = elem.find('.map_card_container')[0];\r\n                if ($panelCard) {\r\n                    cardInner = '<div class = \"card\"><div class=\"title\"><i class=\"icon\" style=\"background:' + colorArr[ctrl.sensor.status % 3] + ';\"></i>' + ctrl.sensor.alias + '</div>';\r\n\r\n                    for (let j = 0; j < ctrl.sensor.values.length; j++) {\r\n                        cardInner += '<div class=\"info\">' + ' <span class=\"text\">' + ctrl.sensor.values[j].name + '</span>' + ' <span class=\"value\">' + ctrl.sensor.values[j].value + '</span>' + ' <span class=\"text\">' + ctrl.sensor.values[j].unit + '</span>' + '</div>';\r\n                    }\r\n\r\n                    $panelCard.innerHTML = cardInner + '</div>';\r\n                }\r\n\r\n                currentLoc = (currentLoc + 1) % ctrl.panel.sensors.length;\r\n\r\n                Timer = setTimeout(setTimer, 3600);\r\n            }\r\n        }\r\n\r\n        this.events.on('render', function () {\r\n            render();\r\n            ctrl.renderingCompleted();\r\n        });\r\n    }\r\n}\r\n\r\nEchartsMapCtrl.templateUrl = 'module.html';\r\n"]}